# Expanded Description: Battleship RL Models Training Visualization

In this project, we will develop a system to train two reinforcement learning models to play the game of Battleship against each other. The two models will use different RL methods: one will use Deep Q-Learning (DQL) and the other will use Advantage Actor-Critic (A2C). These distinct approaches will allow for an interesting comparison of performance.

Each model will need to learn both ship placement strategy and attack strategy. Ships will be placed randomly at the beginning of each game to provide varied training scenarios. The standard Battleship rules will apply with a 10x10 grid and 5 ships of different lengths (Carrier: 5, Battleship: 4, Cruiser: 3, Submarine: 3, Destroyer: 2).

The game will be visualized using Pygame with the window split into two sections:
1. The top section will display the actual game boards showing both models' ship placements and attack histories.
2. The bottom section will display training metrics (loss, reward over time) and win/loss statistics comparing the two models.

The training will proceed in batches of 100 games. While most games will run at maximum speed for efficient training, every 100th game will be displayed in real-time with animated moves so a user can observe the gameplay and strategy development. The animation will show each model's turns and hits/misses with appropriate visual feedback.

No human player interface, sound effects, or extensive documentation will be included, focusing instead on the RL training and visualization aspects.

# File Tree

1. `main.py`
   - Purpose: Entry point for the application, initializes and runs the main game loop
   - Import: N/A (This is the root file)

2. `battleship_game.py`
   - Purpose: Contains the core Battleship game logic, board representation, and rules
   - Import: `from battleship_game import BattleshipGame, Ship, Board`

3. `pygame_renderer.py`
   - Purpose: Handles all visualization using Pygame including game boards and metrics display
   - Import: `from pygame_renderer import GameRenderer`

4. `rl_models/dql_agent.py`
   - Purpose: Implements the Deep Q-Learning model for the first AI player
   - Import: `from rl_models.dql_agent import DQLAgent`

5. `rl_models/a2c_agent.py`
   - Purpose: Implements the Advantage Actor-Critic model for the second AI player
   - Import: `from rl_models.a2c_agent import A2CAgent`

6. `rl_models/base_agent.py`
   - Purpose: Common base class and utilities for both RL agent implementations
   - Import: `from rl_models.base_agent import RLAgent`

7. `utils.py`
   - Purpose: Contains utility functions for data processing, metrics tracking, and visualization helpers
   - Import: `from utils import track_metrics, calculate_statistics`

8. `training_manager.py`
   - Purpose: Orchestrates the training process, batch execution, and metrics collection
   - Import: `from training_manager import TrainingManager`Start testing as soon as possible. DO NOT start making fixes or improvements until you have tested to see if it is working as is.  Your project directory is /home/myuser/apps/battleshiprl. You need to make sure that all files you create and work you do is done in that directory.
